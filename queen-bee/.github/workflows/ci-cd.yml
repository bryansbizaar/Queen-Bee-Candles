name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'

jobs:
  # üß™ Testing Jobs
  test-client:
    name: Test Client
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: client/package-lock.json
          
      - name: Install client dependencies
        working-directory: ./client
        run: npm ci
        
      - name: Run client tests
        working-directory: ./client
        run: npm run test:run
        
      - name: Upload client coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./client/coverage/lcov.info
          flags: client
          name: client-coverage
        continue-on-error: true

  test-server:
    name: Test Server
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: queen_bee_test
          POSTGRES_USER: queenbee
          POSTGRES_PASSWORD: test123
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: server/package-lock.json
          
      - name: Install server dependencies
        working-directory: ./server
        run: npm ci
        
      - name: Run server tests
        working-directory: ./server
        run: npm run test:ci
        env:
          DATABASE_URL: postgres://queenbee:test123@localhost:5432/queen_bee_test
          NODE_ENV: test
          
      - name: Upload server coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./server/coverage/lcov.info
          flags: server
          name: server-coverage
        continue-on-error: true

  # üîç Code Quality
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: client/package-lock.json
          
      - name: Install dependencies
        working-directory: ./client
        run: npm ci
        
      - name: Run ESLint
        working-directory: ./client
        run: npm run lint

  # üèóÔ∏è Build Jobs
  build-client:
    name: Build Client
    runs-on: ubuntu-latest
    needs: [test-client, code-quality]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: client/package-lock.json
          
      - name: Install dependencies
        working-directory: ./client
        run: npm ci
        
      - name: Build client
        working-directory: ./client
        run: npm run build
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL_PROD || 'https://api.yourdomain.com/api' }}
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: client-build
          path: client/dist/
          retention-days: 30

  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-server, test-client]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build and push server image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/server:latest
            ghcr.io/${{ github.repository }}/server:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Build and push client image
        uses: docker/build-push-action@v5
        with:
          context: ./client
          file: ./client/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/client:latest
            ghcr.io/${{ github.repository }}/client:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # üöÄ Deployment Jobs
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying to staging environment..."
          echo "This is where you would add your staging deployment commands"
          echo "For example: kubectl apply -f k8s/staging/ or deploy to your hosting platform"
          
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production environment..."
          echo "This is where you would add your production deployment commands"
          echo "For example: kubectl apply -f k8s/production/ or deploy to your hosting platform"

  # üìä Notify
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
      - name: Notify on success
        if: success()
        run: |
          echo "‚úÖ Deployment successful!"
          # Add Slack/Discord/Email notification here
          
      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed!"
          # Add failure notification here
